name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/legal_memespace/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=legal_memespace --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Test notebook execution
      run: |
        pip install nbconvert nbformat
        jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=60 \
          notebooks/01_data_collection.ipynb --output test_output.ipynb || echo "Notebook test skipped"
    
    - name: Test package installation
      run: |
        pip uninstall -y legal-memespace
        pip install .
        python -c "import legal_memespace; print('Package installed successfully')"
    
    - name: Test CLI entry points
      run: |
        python -c "
        import pkg_resources
        entry_points = pkg_resources.get_distribution('legal-memespace').get_entry_map()
        if 'console_scripts' in entry_points:
            print('Console scripts found:', list(entry_points['console_scripts'].keys()))
        else:
            print('No console scripts defined')
        "
